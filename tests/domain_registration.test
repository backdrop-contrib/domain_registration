<?php
/**
 * @file
 * Tests for the Domain Registration Module
 */
class DomainRegistrationTest extends BackdropWebTestCase {

  public function setUp() {
    parent::setUp(array('domain_registration'));
    config_set('system.core', 'user_register', USER_REGISTER_VISITORS);
    config_set('system.core', 'user_email_verification', TRUE);
    config_set('domain_registration.settings', 'domain_list', 'example.com');
  }

  public function testAllowExactMatch() {
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_ALLOW);
    config_set('domain_registration.settings', 'domain_list', 'example.com');
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@example.com',
    );
    // Attempt to register a user with a whitelist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message'), t('User registered successfully.'));
  }

  public function testAllowEmptyPatternMatch() {
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_ALLOW);
    config_set('domain_registration.settings', 'domain_list', '');

    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@example.com',
    );
    // Attempt to register a user with a whitelist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message'), t('User registered successfully.'));
  }

  public function testAllowWildcardMatch() {
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_ALLOW);
    config_set('domain_registration.settings', 'domain_list', '*.example.com');
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@subdomain.example.com',
    );
    // Attempt to register a user with a whitelist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message'), t('User registered successfully.'));
  }

  public function testDenyNoMatch() {
    config_set('domain_registration.settings', 'domain_list', 'example.com');
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_ALLOW);
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@otherexample.com',
    );
    // Attempt to register a user with a non whitelist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('This email address is not allowed to register.'), t('User was successfully denied registration.'));
  }

  public function testDenyExactMatch() {
    config_set('domain_registration.settings', 'domain_list', 'example.com');
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_DENY);
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@example.com',
    );
    // Attempt to register a user with a blacklist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('This email address is not allowed to register.'), t('User was successfully denied registration.'));
  }

  public function testDenyWildcardMatch() {
    config_set('domain_registration.settings', 'domain_list', '*.example.com');
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_DENY);
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@subdomain.example.com',
    );
    // Attempt to register a user with blacklist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('This email address is not allowed to register.'), t('User was successfully denied registration.'));
  }

  public function testDenyCustomMessage() {
    config_set('domain_registration.settings', 'domain_list', 'example.com');
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_DENY);
    config_set('domain_registration.settings', 'message', 'foo bar baz');
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@example.com',
    );
    // Attempt to register a user with a blacklist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('foo bar baz'), t('Custom denial message was shown.'));
  }


  public function testAllowNoMatch() {
    config_set('domain_registration.settings', 'domain_list', 'example.com');
    config_set('domain_registration.settings', 'method', DOMAIN_REGISTRATION_DENY);
    // Get the user data for registration.
    $edit = array(
      'name' => $this->randomName(),
      'mail' => $this->randomName() . '@otherexample.com',
    );
    // Attempt to register a user with a non blacklist email.
    $this->backdropPost('user/register', $edit, t('Create new account'));
    $this->assertText(t('A welcome message'), t('User registered successfully.'));
  }
}
